import{fk as $,cf as w,dt as b,dg as f,fn as I,fo as T,bG as g,bq as E,d8 as O,fp as M,aq as v,ba as R,ah as s,ai as p,fq as x,cD as F,cv as L,ak as P,fr as j,bd as q}from"./index-f98984bd.js";import{m as J}from"./MultiOriginJSONSupport-07371992.js";import{i as N}from"./APIKeyMixin-565e8950.js";import{E as U,f as k,X as A}from"./SublayersOwner-ccd19c31.js";import{l as _}from"./ArcGISService-feefb171.js";import{a as V}from"./BlendLayer-f3dfe804.js";import{o as z}from"./CustomParametersMixin-07b75f5b.js";import{u as D}from"./OperationalLayer-86d30f51.js";import{j as G}from"./PortalLayer-5687d519.js";import{t as Z}from"./ScaleRangeLayer-b9e2a44e.js";import{a as B}from"./TemporalLayer-820083a2.js";import{d as C}from"./commonProperties-cf103846.js";import{m as H}from"./ExportImageParameters-908e9263.js";import{t as K}from"./imageBitmapUtils-b7c6fc71.js";import{e as S}from"./sublayerUtils-6bbb5a0f.js";import{e as W}from"./versionUtils-c696d155.js";import"./portalItemUtils-0786d38f.js";import"./UniqueValueRenderer-0ba6f39b.js";import"./ColorStop-ab19399c.js";import"./diffUtils-543f87e1.js";import"./colorRamps-c32ea79a.js";import"./jsonUtils-3fd42b6a.js";import"./DictionaryLoader-2818156e.js";import"./FieldsIndex-c41cf585.js";import"./UnknownTimeZone-84b675dd.js";import"./heatmapUtils-887124d2.js";import"./QueryTask-f385994d.js";import"./Query-1e9b8ba4.js";import"./executeForIds-a1af2364.js";import"./query-b09d79d5.js";import"./pbfQueryUtils-ba5efcd9.js";import"./pbf-48104b28.js";import"./queryZScale-8a8c1736.js";import"./executeQueryJSON-f7169fc1.js";import"./FeatureSet-92899ce5.js";import"./executeQueryPBF-f0396c8a.js";import"./FeatureType-edefebf7.js";import"./FeatureTemplate-42477554.js";import"./LabelClass-ab553abc.js";import"./defaults-b79344d9.js";import"./defaultsJSON-59981e75.js";import"./labelingInfo-d628b28b.js";import"./LayerFloorInfo-874b7061.js";import"./serviceCapabilitiesUtils-8b449217.js";import"./AttachmentQuery-cce46b40.js";import"./popupUtils-7ec270f8.js";import"./jsonUtils-4b7f2e2a.js";import"./ElevationInfo-bdf2211b.js";import"./floorFilterUtils-080a7cd2.js";let o=class extends V(B(Z(U(k(_(D(G(J($(N(z(q)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(w).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const m=i.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,m,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=S(a,c.sublayers,b(c.origin))}}const l=[],y={writeSublayerStructure:n,...t};let d=n;a.forEach(r=>{const c=r.write({},y);l.push(c),d=d||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(i.layers=l),d&&(i.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,i,m,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new H({layer:this,floors:t==null?void 0:t.floors,scale:I({extent:e,width:i})*a}),l=n.toJSON();n.destroy();const y=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,h=T(d);l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+m,...l,...y,...r}}async fetchImage(e,i,m,t){const{data:a}=await this._fetchImage("image",e,i,m,t);return a}async fetchImageBitmap(e,i,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,i,m,t);return K(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,i),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&E.fromJSON(l),timeExtent:n&&O.fromJSON({start:n[0],end:n[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,i,m,t,a){var y,d,h;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((y=n.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(l,n);return{data:r,url:l}}catch(r){throw R(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(x("dateFieldsTimeReference"))],o.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],o.prototype,"datesInUnknownTimezone",void 0),s([p()],o.prototype,"dpi",void 0),s([p()],o.prototype,"gdbVersion",void 0),s([p()],o.prototype,"imageFormat",void 0),s([F("imageFormat",["supportedImageFormatTypes"])],o.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],o.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],o.prototype,"imageMaxWidth",void 0),s([p()],o.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],o.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"popupEnabled",void 0),s([p(x("preferredTimeReference"))],o.prototype,"preferredTimeZone",void 0),s([p()],o.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],o.prototype,"sublayers",void 0),s([L("sublayers",{layers:{type:[A]},visibleLayers:{type:[j]}})],o.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],o.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],o.prototype,"type",void 0),s([p(C)],o.prototype,"url",void 0),o=s([P("esri.layers.MapImageLayer")],o);const Be=o;export{Be as default};
